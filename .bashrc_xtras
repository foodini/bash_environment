# * Get bash logging working.  Do a mkdir -p for ~/tmp early, since this and
#   expand_p4_path depend upon it.
# * Set the default prompt hostname color in here, if you're still going to use
#   one.

if [[ $TERM == "cygwin" ]]; then
  export SHELLOPTS
  set -o igncr
fi

export P4_BINARY_LOCATION='/usr/local/bin/p4'

source ~/bin/color_swatch

export PC_PREFERRED=$PC_WHITE
export ESC_PREFERRED=$ESC_WHITE

alias tb='TIMER="" ~/bin/timer && beep'
alias timer='TIMER="" ~/bin/timer'
#less -R preserves color and underline formatting, which I use addictively:
alias less='less -R'
alias rerc='source ~/.bashrc_xtras'
alias virc='vi ~/.bashrc_xtras'
alias vilo='vi ~/.bash_logout_xtras'
export EDITOR='vim'
export GREPLOC=/bin/grep

bind -x '"\eo":"expand_scm -o $COMP_TMP; source $COMP_TMP; rm $COMP_TMP"'
bind -x '"\en":"expand_scm -c $COMP_TMP; source $COMP_TMP; rm $COMP_TMP"'
bind -x '"\eh":"expand_history $COMP_TMP; source $COMP_TMP; rm $COMP_TMP"'

shopt -s histappend

#######################Per-machine configurations###############################
case $HOSTNAME in
tw-mbp-rbarry)
  export GREPLOC=/usr/bin/grep
  export PLATFORM="OSX"
  export PC_PREFERRED=$PC_GREEN
  export ESC_PREFERRED=$ESC_GREEN
  export PATH="$PATH:$HOME/workspace/maven-tools/bin:~/.rbenv/bin:~/.rbenv/shims"
  #export PANTS_CONFIG_OVERRIDE=pants.ini.cache
  export GIT_BINARY_LOCATION=/Users/rbarry/.tools-cache/home/devprod/tools/source/git.Darwin.x86_64/bin/git

  #removed --idea-idea-version=12 
  alias idea="./pants goal idea app-proxy/server:app app-proxy/loadtest/server:bundle expandodo/server:bin expandodo/caps:macaw-caps expandodo/macaw-publishing-portal:bin expandodo/core:core expandodo/server:bin --idea-source-root=build_root"

  alias core="cd \"\$(git rev-parse --show-toplevel)\"/expandodo/core/src/main/scala/com/twitter/expandodo/"
  alias coretest="cd \"\$(git rev-parse --show-toplevel)\"/expandodo/core/src/test/scala/com/twitter/expandodo/"
  alias serv="cd \"\$(git rev-parse --show-toplevel)\"/expandodo/server/src/main/scala/com/twitter/expandodo/"
  alias servtest="cd \"\$(git rev-parse --show-toplevel)\"/expandodo/server/src/test/scala/com/twitter/expandodo/"
  alias up="cd \"\$(git rev-parse --show-toplevel)\""
  bind -x '"˙":"expand_history $COMP_TMP; source $COMP_TMP"'
  bind -x '"ø":"expand_scm -o $COMP_TMP; source $COMP_TMP"'
  ;;
ron-desktop)
  export PLATFORM="WIN"
  export PC_PREFERRED=$PC_BROWN
  export ESC_PREFERRED=$ESC_BROWN
  export PATH=$PATH:$HOME/bin/cygwin
  ;;
box481.*)
  export PLATFORM="LINUX"
  export PC_PREFERRED=$PC_CYAN
  export ESC_PREFERRED=$ESC_CYAN
  ;;
perforce)
  export PLATFORM="LINUX"
  export PC_PREFERRED=$PC_BLUE
  export ESC_PREFERRED=$ESC_BLUE
  ;;
esac
################################################################################

source ~/.bashrc_remote

case $TERM in
  xterm|screen|xterm-256color)
    export SUPPORTS_STATUS_LINE="true"
    ;;
  *)
    export SUPPORTS_STATUS_LINE="false"
    ;;
esac

export PATH=$PATH:~/bin

export COMP_TMP="$HOME/tmp/$BASHPID.sh"
source ~/bin/acd_func.sh

LOGFILE="$HOME/bashlogs/$BASHPID"

################################################################################
#I want these commands to always use color, unless the command is being
#redirected to a file.  I'm sure I'll have to make changes as I find issues.
function a {
  if [[ "$CMD" =~ '>' ]]; then
    ls -al "$@"
  else
    if [[ "$PLATFORM" == "OSX" ]]; then
      CLICOLOR_FORCE=1 ls -al "$@" | comify -f 4
    else
      ls -al --color=always "$@" | comify -f 4
    fi
  fi
}

function grep {
  if [[ -t 1 ]]; then
    $GREPLOC --color=always "$@"
  else
    $GREPLOC --color=never "$@"
  fi
}

function fgrep {
  if [[ -t 1 ]]; then
    find . | $GREPLOC --color=always "$@"
  else
    find . | $GREPLOC --color=never "$@"
  fi
}

# I should build some more intelligence into this: fxgrep -i foo -v bar should group "-i foo" with
# xargs and "-i bar" with find.
function fxgrep {
  FILE_FILTERS=()
  LINE_FILTERS=()
  FOUND_DELIMITER="false"
  for i in $@; do
    if [[ $FOUND_DELIMITER == "false" ]]; then
      LINE_FILTERS+=($i)
      #echo "added $i to LINE_FILTERS"
      if [[ ${i:0:1} != "-" ]]; then
        FOUND_DELIMITER="true"
      fi
    else
      FILE_FILTERS+=($i)
      #echo "added $i to FILE_FILTERS"
    fi
  done

  if [[ -t 1 ]]; then
    WHEN_COLOR="always"
  else
    WHEN_COLOR="never"
  fi
  if [[ "${FILE_FILTERS[@]}" != "" ]]; then
    FILE_FILTER="$GREPLOC ${FILE_FILTERS[@]}"
  else
    FILE_FILTER="cat"
  fi

  #echo "FILE_FILTER:    $FILE_FILTER"
  #echo "FILE_FILTERS[]: ${FILE_FILTERS[@]}"
  #echo "LINE_FILTERS[]: ${LINE_FILTERS[@]}"

  for i in `find . -type f | $FILE_FILTER`; do file "$i"; done | grep text | cut -f1 -d: | ds | xargs $GREPLOC --color=$WHEN_COLOR ${LINE_FILTERS[@]}
}

#This one exists specifically to hilight output, so why protect it from
#redirection?
function hl {
  egrep --color=always "(^)|($1)"
}
################################################################################


#Todo:
# * Add total logging: write $CMD, it's return value, start and end time to a
#   log file somewhere?
# * Get rid of hostname when you're on localhost?  (how?)
# * (on fit-pc, anyway) I'm still seeing the previous command flash up when a
#   blank line is entered
# * move the color definitions to a different file?
#If you put slashes in here, make SURE they are escaped with a backslash!!!
replace_substrings() {
    if [ $BASE == $PWD ]; then
        BACKREF=$1
        CRUFT=$2
        SUB=$3
        SUB_BNW=$4
        BASE=`echo $PWD|sed -e "s/^$CRUFT.*/$SUB/g"`
        BASE_BNW=`echo $PWD|sed -e "s/^$CRUFT.*/$SUB_BNW/g"`
        TRIM=`echo $PWD|sed -e "s/^$CRUFT\(.*\)/$BACKREF/g"`
    fi
}

debug_echo() {
  #echo $@
  echo -en ""
}

if [ "$TIMER_PID" != "" ]; then
  kill -9 $TIMER_PID
fi
if [ -e "$LOGFILE" ]; then
  rm -f $LOGFILE
fi
bash_timer_manager $LOGFILE & export TIMER_PID=$!

TIMER="true"

start_timer() {
  if [ ! -e "$LOGFILE" ]; then
    CMD=`history | tail -1 | tr -s " " | cut -f2-1000 -d" "`
    #So you can silence the timer like this:
    #  TIMER="" sleep 5
    if [ "$TIMER" == "true" ]; then
      echo "$PROMPT_BNW $CMD" > $LOGFILE
    else
      #Given the command:
      # TIMER="" sleep 5
      #the timer was started BEFORE the command was processed, so we need to
      #kill the timer.
      stop_timer
    fi
  fi
}

stop_timer() {
  if [ -e "$LOGFILE" ]; then
    rm -f $LOGFILE
  fi
}

gen_prompt_text() {
    LAST_RETURN_VAL=$?
    #echo $LAST_RETURN_VAL >> $LOGFILE
    #date >> "$LOGFILE"
    #echo >> "$LOGFILE"

    if [ $LAST_RETURN_VAL == 0 ]; then
        PC_BASE_COL=$PC_PREFERRED
        ESC_BASE_COL=$ESC_PREFERRED
    else
        PC_BASE_COL=$PC_RED
        ESC_BASE_COL=$ESC_RED
    fi

    HOST_SHORT=`hostname | cut -f1 -d.`

    BASE=$PWD
    TRIM=$PWD

    #replace_substrings takes;
    # * This is the worst bit, and I'll try to figure it out later.  You
    #   have to provide the regular expression backreference ONE BEYOND the
    #   last one you use.  If you don't use any (or you don't know what I'm
    #   talking about, use "\1".  If you use one backreference in the
    #   second argument, use "\2".  Etc.  It's used to extract the last
    #   portion of your current working directory.
    # * a regular expression match for the bit you want to chop off at the
    #   beginning 
    # * the string to replace the regex with in colorized prompts.  You don't
    #   have to use color.  If you don't this argument and the next will be
    #   the same.
    # * the string to replace the regex with in colorless prompts.
    case $HOSTNAME in
    fzzt.*)
      replace_substrings "\1" ".usr.local.google.home.rbarry"\
           "$ESC_BOLD${ESC_GREEN}~${ESC_BASE_COL}$ESC_BOLD_OFF" "~"
      replace_substrings "\1" \
           ".google.src.cloud.rbarry.rbarry-get_[^n]*name"\
           "$ESC_BOLD${ESC_GREEN}{GDBN}${ESC_BASE_COL}$ESC_BOLD_OFF" "{GDBN}"
      replace_substrings "\1" ".google.src.cloud.rbarry.rbarry-trusted[^\/]*"\
           "$ESC_BOLD${ESC_GREEN}{TTW}${ESC_BASE_COL}$ESC_BOLD_OFF" "{TTW}"
      replace_substrings "\1" ".google.src.cloud.rbarry.rbarry-user_can_[^\/]*"\
           "$ESC_BOLD${ESC_GREEN}{UCCAD}${ESC_BASE_COL}$ESC_BOLD_OFF" "{UCCAD}"
      replace_substrings "\2" ".google.src.cloud.rbarry.rbarry-\([^\/]*\)"\
           "$ESC_BOLD${ESC_GREEN}{\\1}${ESC_BASE_COL}$ESC_BOLD_OFF" "{\\1}"
      ;;
    fit-pc)
      replace_substrings "\1" ".home.ronb"\
           "$ESC_BOLD${ESC_GREEN}~${ESC_BASE_COL}$ESC_BOLD_OFF" "~"
      ;;
    box481.*)
      replace_substrings "\1" ".home1.foodinio"\
           "$ESC_BOLD${ESC_GREEN}~${ESC_BASE_COL}$ESC_BOLD_OFF" "~"
      ;;
    esac

    # If none of the above clauses have matched, TRIM is all we're going to
    # display after the hostname, so clear BASE and BASE_BNW
    if [ "$BASE" == "$PWD" ]; then
      BASE=""
      BASE_BNW=""
    fi

    if [ ${#TRIM} -gt 37 ]; then
        #TRIM=`echo $TRIM|sed -e "s/^.*\(.\{37\}\)$/\\1/"`
        #TRIM="...$TRIM"
        TRIM=`echo $TRIM|sed -e "s/^.*\(.\{37\}\)$/...\\1/"`
    fi

    PROMPT_COL="$PC_BASE_COL$TRIM$PC_RESET"

    BRANCH=`git branch 2>&1 | grep '^\*' | cut -c3-`
    if [ "$BRANCH" != "" ]; then
      export BRANCH="($BRANCH) "
    fi
    TIME=`date +%I:%M`
    export PROMPT_BNW="$HOST_SHORT $TIME $BRANCH$BASE_BNW$TRIM> "
    export PROMPT_COL="$PC_UNDER$PC_BASE_COL$HOST_SHORT$PC_UNDER_OFF $TIME $BRANCH$BASE$PROMPT_COL> "
    if [ $SUPPORTS_STATUS_LINE == "true" ]; then
        export PS1="\[\033]0;$PROMPT_BNW\a\]$PROMPT_COL"
    else
        export PS1=$PROMPT_COL
    fi

    stop_timer
}

export PROMPT_COMMAND='gen_prompt_text'

if [ $SUPPORTS_STATUS_LINE == "true" ]; then
    trap 'start_timer' DEBUG
fi
