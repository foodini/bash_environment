# * Set the default prompt hostname color in here, if you're still going to use
#   one.
# * de-dupe the PATH? (got the path_dedup util, but not sure i need it.)
# * in git_do, you're using grep instead of $GREPLOC


#set -xv

if [ ! -d ~/tmp ]; then
  echo ~/tmp doesn\'t exist. Creating it.
  mkdir ~/tmp
fi

#if $1 isn't in the path, set the new path to be $2
function pathmod() {
  if [[ ":$PATH:" != *":$1:"* ]]; then
    export PATH=$2
  fi
}

function pathpre() {
  pathmod "$1" "$1:$PATH"
}

function pathpost() {
  pathmod "$1" "$PATH:$1"
}

pathpost "$HOME/bin"

source ~/bin/color_swatch

export PREFERRED_PROMPT_COLOR=$PC_WHITE

alias tb='ntt ~/bin/timer 9:00 && beep'
alias timer='ntt ~/bin/timer'
#less -R preserves color and underline formatting, which I use addictively:
alias less='less -R'
alias rerc='source ~/.bashrc_xtras'
alias virc='vi ~/.bashrc_xtras'
alias vilo='vi ~/.bash_logout_xtras'
alias g='git status'
alias gpo='git push origin $BRANCH'

export EDITOR='vim'
export GREPLOC=/bin/grep
export GITLOC=/usr/bin/git

#I get sick of doing grep --line-buffered. I can just do grep $B
export B=--line-buffered

#bind -x '"\eo":"expand_scm -o $COMP_TMP; source $COMP_TMP; rm $COMP_TMP"'
bind -x '"\C-p":"expand_scm -c $COMP_TMP; source $COMP_TMP; rm $COMP_TMP"'
bind -x '"\C-n":"expand_history $COMP_TMP; source $COMP_TMP; rm $COMP_TMP"'

FBH_DELIM="⦀"

shopt -s histappend

HISTSIZE=5000
HISTFILESIZE=10000

#######################Per-machine configurations###############################
case $HOSTNAME in
rons-mbp.lan*|Rons-MacBook-Pro.local*|ronb-01XMD6R*)
  echo SETTING UP MAC
  export BASHRC_XTRAS_TIMESTAMP=`stat -f %m ~/.bashrc_xtras`

  ssh-add -K ~/.ssh/id_rsa_victor_shared 2> /dev/null > /dev/null
  ssh-agent > /dev/null

  export GREPLOC=/usr/bin/grep
  export HOST_PLATFORM="OSX"
  export PREFERRED_PROMPT_COLOR=GREEN

  alias up="cd \"\$(git rev-parse --show-toplevel)\""
  alias gpo='git push origin $BRANCH'

  bind -x '"˙":"expand_history $COMP_TMP; source $COMP_TMP"'
  bind -x '"ø":"expand_scm -o $COMP_TMP; source $COMP_TMP"'
  pathpre "/usr/local/Cellar/ctags/5.8/bin"

  ;;
ron-desktop|ron-laptop)
  export BASHRC_XTRAS_TIMESTAMP=`stat -c%Y ~/.bashrc_xtras`

  export PROCESS_AIRCAM_PATHS="True"
  export HOST_PLATFORM="LINUX"
  export PREFERRED_PROMPT_COLOR=BROWN

  eval "$(register-python-argcomplete launch_pipeline)"
  eval "$(register-python-argcomplete skyrun)"

  #FOR FUTURE REFERENCE..... Make sure that you're doing the --no_mount_check ONLY on the desktop
  #ON THE LAPTOP, MAKE SURE YOU RUN log_mounter first
  alias pb='echo "pushd /home/skydio/aircam; (./skyrun bin log_playback_daemon --no_mount_check &> ~/tmp/log_playback_daemon &); popd"'
  alias ac='cd_func /home/skydio/aircam'
  alias ac2='cd_func /home/skydio/aircam2'
  alias ac3='cd_func /home/skydio/aircam3'

  alias ssh_usb='ssh aircam@192.168.11.1'
  alias ssh_wifi='ssh aircam@192.168.10.1'
  alias ssh_eth='ssh aircam@mariner132'

  xset b 70
  pactl upload-sample /usr/share/sounds/ubuntu/stereo/bell.ogg bell.ogg
  ;;
ron-VirtualBox)
  echo Setting up Linux Environment
  export BASHRC_XTRAS_TIMESTAMP=`stat -c%Y ~/.bashrc_xtras`

  export GREPLOC=/usr/bin/grep
  export HOST_PLATFORM="LINUX"
  export PREFERRED_PROMPT_COLOR=CYAN
  ;;
esac
################################################################################

case $TERM in
  xterm|screen|xterm-256color)
    export SUPPORTS_STATUS_LINE="true"
    ;;
  *)
    export SUPPORTS_STATUS_LINE="false"
    ;;
esac

if [ "$BASHPID" == "" ]; then
  echo "Holy Ancient Versions, Bashman! (Upgrade to 4.something.)"
fi

export COMP_TMP="$HOME/tmp/$BASHPID.sh"
source ~/bin/acd_func.sh

LOGFILE="$HOME/bashlogs/$BASHPID"

################################################################################
#I want these commands to always use color, unless the command is being
#redirected to a file.  I'm sure I'll have to make changes as I find issues.
function a {
  if [[ -t 1 ]]; then
    if [[ "$HOST_PLATFORM" == "OSX" ]]; then
      CLICOLOR_FORCE=1 ls -al "$@" | comify -f 4
    else
      ls -al --color=always "$@" | comify -f 4
    fi
  else
    ls -al "$@"
  fi
}

function grep {
  if [[ -t 1 ]]; then
    $GREPLOC -E --color=always "$@"
  else
    $GREPLOC -E --color=never "$@"
  fi
}

function fgrep {
  if [[ -t 1 ]]; then
    find . | $GREPLOC -E --color=always "$@"
  else
    find . | $GREPLOC -E --color=never "$@"
  fi
}

function fc {
    grep \\W"$@"\\W ~/workspace/victor/robot/include/anki/cozmo/shared/factory/faultCodes.h
}

# Needs work. How does the argument refer to the filename?
# can you pipe for...done to an xargs?
function git_do {
    echo $GITLOC status | $GREPLOC '(modified)|(added)'

    # REGARDING THE USE OF grep here: replacing w/ $GREPLOC fails and I don't know why.
    for x in `$GITLOC status | grep -e '((modified)|(added)):' | tr -s " " | cut -f2 -d" "`; do echo $x; done
}

# fxgrep takes all args up to and including the first that doesn't start with
# '-' and does a find . | grep [everything else] | xargs grep [first arg set]
# If there's only one arg not beginning with '-': find . | xargs grep [args]
#
# I'd still like a way to point fxgrep at a directory, but I'm not sure what to
# do with the syntax. fxgrep [directory] -- [first grep args] [second args] ?
# Require each arg/argset to be quoted?
#
#TODO: fix: fxgrep "foo bar" "yodeling yoda" - quotes lost in constructed command.
function fxgrep {
  declare -a FILE_FILTER=()
  declare -a LINE_FILTER=("-H")
  FOUND_DELIMITER="false"
  for i in "$@"; do  #Quoting makes it accept quoted args as single args
    if [[ $FOUND_DELIMITER == "false" ]]; then
      LINE_FILTER+=($i)
      if [[ ${i:0:1} != "-" ]]; then
        FOUND_DELIMITER="true"
      fi
    else
      FILE_FILTER+=($i)
    fi
  done

  if [[ -t 1 ]]; then
    WHEN_COLOR="always"
  else
    WHEN_COLOR="never"
  fi
  if [[ "$FILE_FILTER" != "" ]]; then
    FILE_FILTER="$FILE_FILTER"
  else
    FILE_FILTER="^"
  fi

  # When you leave variables unquoted (e.g., $LINE_FILTER instead of "$LINE_FILTER"), it affects
  # the interpolation of special characters in the variable. But I would expect quoting to work
  # and unquoted to fail (http://www.tldp.org/LDP/abs/html/quotingvar.html), but this is working
  # for now. I never want to touch this again. Actually, I REALLY need to set up test cases for
  # this thing if I ever touch it again.

  # Tell the for loop to only use \n as a delimiter. Otherwise, spaces in filenames will cause
  # splits. Note that IFS affects how arrays are joined, as well. Evidently, I could have avoided
  # this entire nightmare with eval.
  IFS=$'\n'
  find . -type f | $GREPLOC -v ^\./\.git\/ | $GREPLOC -E ${FILE_FILTER[*]} | ds | xargs -P 16 -L 64 $GREPLOC -E --color=$WHEN_COLOR ${LINE_FILTER[*]}
}

function pygrep() {
  fxgrep -n $@ [.]py$
}

function cgrep() {
  fxgrep -n $@ "[.]((h)|(cpp)|(s)|(cc)|(c[+]*))$"
}

function pbgrep() {
  fxgrep -n $@ [.]proto$
}

function lcmgrep() {
  fxgrep -n $@ [.]lcm$
}

function ggrep() {
  fxgrep -n $@ [.]go$
}

#This one exists specifically to hilight output, so why protect it from
#redirection?
function hl {
  egrep --color=always "(^)|($1)"
}
################################################################################


debug_echo() {
  #echo $@
  echo -en ""
}

if [ "$TIMER_PID" != "" ]; then
  kill -9 $TIMER_PID
fi
if [ -e "$LOGFILE" ]; then
  rm -f $LOGFILE
fi
bash_timer_manager $LOGFILE & export TIMER_PID=$!

#function names must be >= 3 characters.
ntt() {
  if [ -e "$LOGFILE" ]; then
    rm $LOGFILE
  fi
  $@
}

get_time_ns() {
  date +%s%N
}

get_elapsed_time() {
    START_ELAPSED_TIME=$1
    END_ELAPSED_TIME=$2
    ELAPSED_TIME_IN_S=`echo "scale=3; ( $END_ELAPSED_TIME - $START_ELAPSED_TIME ) / 1000000000.0" | bc`
    python3 -c "from datetime import timedelta; print(str(timedelta(seconds=$ELAPSED_TIME_IN_S)))"
}

# (The trap handler)
on_command_entered_handler() {
    ##### BEGINNING OF INTER-COMMAND STUFF
    # In case someone does:
    #    do first thing ; do second thing
    # Here we apply any changes that need to happen between the two commands. It actually happens
    # just as the second one is about to be processed.

    # I'm not a huge fan of doing it this way - it means that `cd xxx; yyy` behaves differently than
    # `cd xxx && yyy`

    if [[ "$PROCESS_AIRCAM_PATHS" == "True" ]]; then
      PATH=`echo $PATH | sed -e "s|/home/skydio/aircam[^:]*:*||g"`
      if [[ $PWD =~ /home/skydio/aircam* ]]; then
        export AIRCAM_ROOT=`echo $PWD | /usr/bin/cut -f1-4 -d/`
        export AIRCAM_PREFIX=${AIRCAM_ROOT}/build/host_aircam
        export LD_LIBRARY_PATH=${AIRCAM_ROOT}/build/host_aircam/lib:${AIRCAM_ROOT}/build/host_third_party/lib
        # ...then re-add them
        pathpre "$AIRCAM_ROOT/build/host_third_party/bin"
        pathpre "$AIRCAM_ROOT/build/host_aircam/bin"
        pathpre "$AIRCAM_ROOT"
      fi
    fi

    #### END OF INTER-COMMAND STUFF

    # gen_prompt_text TRIGGERS THE DEBUG TRAP!!! In fact, any simple command that is issued in this
    # script will trigger the debug trap. It'll even trigger once for each echo in;
    #     echo foo; echo bar; echo something else
    # To deal with this, as soon as we are done generating the prompt, we set AT_PROMPT to True.
    # When the debug trap fires, it must be the first time since the prompt was generated. In other
    # words, when the user hit Enter.
    if [ "$AT_PROMPT" == "True" ]; then
        if [ "$BASH_COMMAND" == "gen_prompt_text" ]; then
            SUPPRESS_LOG_LINE="True"
        else
            SUPPRESS_LOG_LINE="False"
        fi

        # The primary reason to get the command this way is to get what they actually typed, instead
        # of the alias-interpolated version. ($BASH_COMMAND turns 'a' into 'ls -al')
        COMMAND_LINE=`history | tail -1 | tr -s " " | cut -f3-1000 -d" "`
        COMMAND_START_DATE=`date`
        COMMAND_START_S=`python3 -c "import time; print(time.time())"`
        PWD_AT_COMMAND_ENTRY=$PWD
    fi

    AT_PROMPT="False"
}

on_command_exited_handler() {
    if [ -e "$LOGFILE" ]; then
        rm -f $LOGFILE
    fi

    if [ "$SUPPRESS_LOG_LINE" == "False" ]; then
        COMMAND_END_S=`python3 -c "import time; print(time.time())"`
        ELAPSED_FORMATTED=`python3 -c "from datetime import timedelta; print(str(timedelta(seconds=$COMMAND_END_S-$COMMAND_START_S)))"`

        echo "$COMMAND_START_DATE$FBH_DELIM${ELAPSED_FORMATTED}$FBH_DELIM$$$FBH_DELIM$GIT_BRANCH$FBH_DELIM$PWD_AT_COMMAND_ENTRY$FBH_DELIM$LAST_RETURN_VAL$FBH_DELIM$COMMAND_LINE" >> ~/full_bash_history
    fi
}

gen_prompt_text() {
    # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # DON'T PUT ANYTHING BEFORE THE CAPTURE OF LAST_RETURN_VAL!!!!
    # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    LAST_RETURN_VAL="$?"
    on_command_exited_handler

    history -a

    export GIT_BRANCH=`$GITLOC branch 2>&1 | grep '^\*' | cut -c3- | sed -e "s/HEAD detached at //"`

    gen_prompt_text.py T $LAST_RETURN_VAL $PREFERRED_PROMPT_COLOR RED

    source ~/tmp/prompt_$$.sh
    rm ~/tmp/prompt_$$.sh

    if [ $SUPPORTS_STATUS_LINE == "true" ]; then
        ITERM2_PROMPT_MARK_TYPE=`type -t iterm2_prompt_mark`
        if [ "$ITERM2_PROMPT_MARK_TYPE" == "function" ]; then
            #Add the info that iTerm2 Shell Integration needs for mark navigation. (You can always
            #add one, manually, with shift-command-m) Navigate w/ shift-command-arrows
            export PS1="\[\033]0;$PROMPT_BNW\a\]\[$(iterm2_prompt_mark)\]$PROMPT_COL"
        else
            export PS1="\[\033]0;$PROMPT_BNW\a\]$PROMPT_COL"
        fi
    else
        export PS1=$PROMPT_COL
    fi

    if [ "$HOST_PLATFORM" == "OSX" ]; then
        set_term_bgcolor_for_state $BASE
    fi

    AT_PROMPT="True"
}

export PROMPT_COMMAND='gen_prompt_text'
SUPPORTS_STATUS_LINE="True"
trap 'on_command_entered_handler' DEBUG

function git() {
    GIT_PAUSE="false"
    if [[ "$1" == "clone" && "$2" != *"ssh://git@github"* ]]; then
        echo !!!!!!!!!!! are you sure you are cloning properly? !!!!!!!!
        echo !!!!!!!!!! maybe.... git clone ssh://git@github.... !!!!!!!
        GIT_PAUSE="true"
    fi
    declare -a patterns=("^\+.*ipdb" "^\+.*DO.NOT.SUBMIT" "^\+.{120}")
    SKIP="true"
    if [[ "$1" == "add" ]]; then
        ARGS=""
        SKIP="false"
    elif [[ "$1" == "commit" ]]; then
        ARGS="--staged"
        SKIP="false"
    fi

    if [[ "$SKIP" == "false" ]]; then
        for PATTERN in "${patterns[@]}"; do
            echo $GITLOC diff $ARGS "${@:2}"| grep -e $PATTERN
            RESULT=`$GITLOC diff $ARGS | grep -e $PATTERN`
            if [[ "$RESULT" != "" ]]; then
                echo !!!!!!!!!!!!!!!!!!!!!   what\'s $PATTERN doing in there\?   !!!!!!!!!!!!!!!!!!
                echo $RESULT
                GIT_PAUSE="true"
            fi
        done
        if [[ "$GIT_PAUSE" == "true" ]]; then
            sleep 3
        fi
    fi

    $GITLOC $@
}

function figit() {
    TXT=$1
    EMO1=$2
    EMO2=$3
    #figlet -f 3x5 $TXT | sed -e "s/ /:$EMO1:/g" | sed -e "s/#/:$EMO2:/g" | tail -5
    figlet -f banner $TXT | sed -e "s/ /:$EMO1:/g" | sed -e "s/#/:$EMO2:/g" | tail -8
}

ssh() {
  set_term_bgcolor_for_state "$@"
  /usr/bin/ssh $@
}

bing() {
  ping "$@" | grep --line-buffered bytes.from.*icmp_seq | beep
}

shing() {
    (
        declare -i counter

        counter=0
        while true; do
            (
                #I need to pass on "Could not resolve hostname", etc. Essentially, any time I get
                #an error return, that should be displayed to the user.
                rtt=`(time (ssh "$@" echo >> /dev/null)) 2>&1 | grep -v 'ost is down' | grep real | cut -c6-`
                echo $counter: $rtt
            ) &
            counter=$counter+1
            sleep 1
        done
    )
}

set_term_bgcolor_for_state() {
    local STATE=$1
    if [[ $HOST_PLATFORM != "OSX" ]]; then
        true
    elif [[ $STATE == *marvel* ]]; then
        set_term_bgimage /Users/ronbarry/background_images/marvel.jpg
    elif [[ $STATE == *fgser* ]]; then
        set_term_bgimage /Users/ronbarry/background_images/familyguy.png
    elif [[ $STATE == *tinyservicelib* ]]; then
        set_term_bgimage /Users/ronbarry/background_images/tsl2.png
    elif [[ $STATE == *workspace/gae* ]]; then
        set_term_bgimage /Users/ronbarry/background_images/gae.png
    elif [[ $STATE == *erverama* ]]; then
        #set_term_bgimage /Users/ronbarry/background_images/hypno.gif
        set_term_bgimage /Users/ronbarry/background_images/hypno.gif
    elif [[ $STATE == *harry* ]]; then
        set_term_bgimage /Users/ronbarry/background_images/hp.jpg
    elif [[ $STATE == *ronbarry* ]]; then
        set_term_bgcolor 0 0 40
    else
        set_term_bgcolor 0 0 0
    fi
}

set_term_bgimage(){
  /usr/bin/osascript <<EOF
tell application "iTerm"
  tell the current window
    tell the current session
      set background image to "$1"
    end tell
  end tell
end tell
EOF
}

set_term_bgcolor(){
  local R=$1
  local G=$2
  local B=$3
  /usr/bin/osascript <<EOF
tell application "iTerm"
  tell the current window
    tell the current session
      set background image to ""
      set background color to {$(($R*65535/255)), $(($G*65535/255)), $(($B*65535/255))}
    end tell
  end tell
end tell
EOF
}


function bdr() {
  ITERM2_PROMPT_MARK_TYPE=`type -t iterm2_prompt_mark`
  if [ "$ITERM2_PROMPT_MARK_TYPE" == "function" ]; then
    (iterm2_prompt_mark || true)
  fi
  echo -e ${COL_RED}build...${COL_WHITE} && victor_build_debug $1
  if [ $? != 0 ]; then return; fi
  echo

  if [ "$ITERM2_PROMPT_MARK_TYPE" == "function" ]; then
    (iterm2_prompt_mark || true)
  fi
  echo -e ${COL_RED}deploy...${COL_WHITE} && victor_deploy_debug
  if [ $? != 0 ]; then return; fi
  echo

  if [ "$ITERM2_PROMPT_MARK_TYPE" == "function" ]; then
    (iterm2_prompt_mark || true)
  fi
  echo -e ${COL_RED}wait...${COL_WHITE} && sleep 1
  echo -e ${COL_RED}victor_restart...${COL_WHITE}
  victor_restart
  echo -e ${COL_RED}done...${COL_WHITE}

  beep 1
}
