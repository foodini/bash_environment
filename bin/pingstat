#!/usr/bin/env python3

from subprocess import Popen, PIPE
import math
import re
import sys
import time

import text_manipulation as tm

class Result(object):
  def __init__(self, timestamp, successful, rtt):
    self.timestamp = timestamp
    self.successful = successful
    self.rtt = rtt

class Stat(object):
  def __init__(self, interval):
    self.interval = interval
    self.last_update = time.time()
    self.results = []
    self.total_rtt = 0.0
    self.total_returns = 0

  def update(self, timestamp, successful, rtt):
    now = time.time()
    while len(self.results) > 0 and self.results[0].timestamp + self.interval < now:
      result = self.results.pop(0)
      if result.successful:
        self.total_returns = self.total_returns - 1
        self.total_rtt = self.total_rtt - result.rtt

    self.results.append(Result(timestamp, successful, rtt))
    if successful:
      self.total_returns += 1
      self.total_rtt += rtt

  def get(self):
    if len(self.results) == 0:
      return #Figure out what to do here.

    loss_pct = 100.0 - (100.0 * self.total_returns / len(self.results))
    avg_rtt = self.total_rtt / len(self.results)

    deviation = 0.0
    mini = 9999.0
    maxi = 0.0
    for r in self.results:
      deviation += (r.rtt - avg_rtt) ** 2
      if r.successful:
        if r.rtt < mini:
          mini = r.rtt
        if r.rtt > maxi:
          maxi = r.rtt

    std_dev = 0
    if len(self.results) > 1:
      std_dev = math.sqrt(deviation / len(self.results))

    return (self.interval, loss_pct, avg_rtt, std_dev, mini, maxi)


stats = [Stat(15), Stat(300), Stat(3600), Stat(86400)]

is_received = re.compile(r'bytes from.*time=([^ ]+)')

last_term_width = 0
last_term_height = 0

fd = Popen(['/sbin/ping', '-i', '0.25', '8.8.8.8'], stdout=PIPE, stderr=PIPE)
#
#      !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#TODO: !!!!!!!get stderr on the screen!!!!!!!!
#      !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#
for line in fd.stdout:
  line = str(line)
  matched = False

  now = time.time()

  m = re.search(is_received, line)
  if m:
    t = float(m.groups(2)[0])
    for s in stats:
      s.update(now, True, t)
    matched = True

  if 'Request timeout' in line or 'Destination Net Unreachable' in line:
    for s in stats:
      s.update(now, False, 0.0)
    matched = True

  if 'PING' in line and 'data bytes' in line:
    continue

  if matched == False:
    tm.print_at(0, -1, 'No match for ' + line)
    continue

  term_width = tm.get_terminal_width()
  term_height = tm.get_terminal_height()
  if term_width != last_term_width or term_height != last_term_height:
    tm.clear_screen()
    last_term_width = term_width
    last_term_height = term_height

  locations, cell_width, cell_height = tm.draw_grid(
      1, 1,
      tm.get_terminal_width() - 1, tm.get_terminal_height() - 3, # Leave room @ btm for responses
      4, 3)

  statistics = []
  for stat in stats:
    statistics.append(stat.get())

  all_max = statistics[-1][5]

  for column, (interval, loss_pct, avg_rtt, std_dev, mini, maxi) in enumerate(statistics):
    header = '%d â†“%.1f â†‘%.1f' % (
        interval, mini, maxi)
    tm.histogram(
        locations[column][0][0], locations[column][0][1],
        cell_width, cell_height, header,
        [r.rtt for r in stats[column].results if r.successful])
    header = '%ds %.1fÎ¼ms %.1fÏƒ' % (
        int(now - stats[column].results[0].timestamp + 0.5),
        avg_rtt, std_dev)
    tm.timeseries(
        locations[column][1][0], locations[column][1][1],
        cell_width, cell_height, all_max, header,
        [r.rtt for r in stats[column].results])
    header = 'ðŸš«%.1f%%' % (loss_pct)
    tm.timeseries(
        locations[column][2][0], locations[column][2][1],
        cell_width, cell_height, None, header,
        [r.successful for r in stats[column].results],
        lambda prev,cur: prev + (0 if cur else 1))


  tm.print_at(0, -2, line)
  tm.flush()
