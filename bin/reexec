#!/usr/local/bin/bash

#TODO:
# rename the helper so typing reexec[tab] properly completes... adding the space

CPID=""
# Single quotes around the command so interpolation of CPID is done at signal
# time.
trap 'echo shutting down $CPID; kill -9 $CPID &>> /dev/null; exit 0' SIGINT

function restart_child() {
  # if the iTerm2 extensions are installed, attach a mark to the starting point
  # of the process' output so we can shift-command-up or shift-command-down
  # to shuffle through them. I'm not using the iterm2_shell_integration.bash
  # script to get the iterm2_prompt_mark function because somehow, sourcing
  # the file doesn't make the fuction available here.
  if [ "$HOST_PLATFORM" == "OSX" ]; then
    printf "\033]133;A\007"
  fi

  # If you slap parentheses around $@ &, you can silence job control msgs, but
  # you lose the ability to extract $!
  $@ &
  CPID=$!
  echo "(pid:$CPID) $@"
  let COUNT=0
}

function dead {
  kill -0 $CPID &>> /dev/null
  RETVAL=$?

  # REMEMBER that a non-zero return value, in bash, means FAILURE!!!
  if [[ "$RETVAL" == "0" ]]
  then
    return 1
  else
    return 0
  fi
  return $RETVAL
}

function print_time() {
  let seconds="$1%60"
  let minutes="($1/60)%60"
  let hours="($1/3600)%24"
  let days="$1/86400"
  printf "\033[32m\b\b\b\b\b\b\b\b\b\b\b\b\b%d:%02d:%02d:%02d\033[0m" \
    $days $hours $minutes $seconds
}

ARGS=$@
HELPER_RESULT=( $(reexec_helper.py ${ARGS[*]}) )
LAST_MOD_TIME=${HELPER_RESULT[0]}
COMMAND_LINE=("${HELPER_RESULT[@]:1}")
restart_child ${COMMAND_LINE[@]}

while [[ true ]]
do
  sleep 1
  HELPER_RESULT=( $(reexec_helper.py ${ARGS[*]}) )
  CUR_MOD_TIME=${HELPER_RESULT[0]}
  if [[ "$LAST_MOD_TIME" == "$CUR_MOD_TIME" ]]
  then
    # Remember that in bash 0 is SUCCESSFUL and 1 is FAILURE
    if dead
    then
      NOW=`date +%s`
      let TIME_DELTA="$NOW-$LAST_MOD_TIME"
      print_time TIME_DELTA
    fi
  else
    echo
    LAST_MOD_TIME=$CUR_MOD_TIME
    kill -9 $CPID &>> /dev/null
    restart_child ${COMMAND_LINE[@]}
  fi
done
