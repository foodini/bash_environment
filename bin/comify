#!/usr/bin/env python3

from collections import defaultdict
import sys
import re

def usage():
    print('usage:     ', sys.argv[0], '[-h|-f fieldspec]')
    print('fieldspec:  Comma-separated list of fields (columns) to apply. Fields are')
    print('            separated by groups of whitespaces.')
    print('            -f 0           Only apply to the first field.')
    print('            -f 1,3         Apply to the second and forth fields.')
    print('            -f 1,3,5-7     Apply to the second, forth, 6th, 7th, and 8th.')
    exit(0)


if len(sys.argv) == 2:
    usage()

underline = "\033[4m"
no_underline = "\033[24m"

def left_to_right(val_str):
    return False, [val_str[i:i+3] for i in range(0, len(val_str), 3)]

def right_to_left(val_str):
    retval = []
    while val_str:
        retval.append(val_str[-3:])
        val_str = val_str[0:-3]
    retval.reverse()
    return not bool(len(retval)%2), retval

def mark_triples(val_str, direction):
    retval = ''
    flop, triples = direction(val_str)
    for tri in triples:
        if flop:
            retval += underline + tri + no_underline
        else:
            retval += tri
        flop = not flop
    return retval

frac_re = re.compile('(.*\.)(\d{4,})(.*)')
#Tricky bit: the '.*?' is important, to keep the .* from greedy-matching. Otherwise, the \d{4,} will
#only ever be able to match 4 values. My lazy-matching with the '.*?', we leave as many digits as 
#possible for the second group.
int_re = re.compile('(.*?)(\d{4,})(.*)')
def mark_floats(val_str):
    for regex, direction in [(frac_re, left_to_right), (int_re, right_to_left)]:
        match = re.match(regex, val_str)
        while match:
            g = match.groups()
            val_str = g[0] + mark_triples(g[1], direction) + g[2]
            match = re.match(regex, val_str)
    return val_str

field_ids = defaultdict(lambda: False)
field_spec_exists = False
if len(sys.argv) == 3 and sys.argv[1] == '-f':
    field_spec_exists = True
    for field_spec in sys.argv[2].split(','):
        match = re.match('(\d*)-(\d*)', field_spec)
        if match:
            start = int(match.groups()[0]) or 0
            end = int(match.groups()[1]) or 999
            for field in range(start, end+1):
                field_ids[int(field)] = True
        else:
            field_ids[int(field_spec)] = True

re_fieldbreak = re.compile('\s*\S+\s*')
re_digitgroups = re.compile('\d{4,}')
for line in sys.stdin.readlines():
    line = line.strip()
    if not field_spec_exists:
        print (mark_floats(line))
    else:
        matches = re_fieldbreak.findall(line)
        for i, match in enumerate(matches):
            if field_ids[i]:
                print(mark_floats(match), end='')
            else:
                print(match, end='')
        print()
